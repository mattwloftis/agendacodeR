<<<<<<< HEAD
% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classifyNB.R
\name{classifyNB}
\alias{classifyNB}
\title{Classify Naive Bayes}
\usage{
classifyNB(est, test_matrix, test)
}
\arguments{
\item{est}{Output object from \code{trainNB}}

\item{test_matrix}{A \pkg{quanteda} document-feature matrix with the same number of rows as \code{test}. Rows must match.}

\item{test}{The data frame containing the text data from which \code{test_matrix} was created.}
}
\value{
A data frame equal to \code{test} with four added columns:
\item{max_posterior}{Maximum posterior probability of any class for this document. This matches the posterior probability of the classification assigned in the \code{max_match} column.}
\item{max_ratios}{Maximum ratio of posterior to prior probability of any class for this document. This matches the ratio of the classification assigned in the \code{ratio_match} column.}
\item{max_match}{Class associated with maximum posterior probability. Contains predicted class for each observation in \code{test}.}
\item{ratio_match}{Class associated with maximum ratio of posterior to prior probability. Contains predicted class for each observation in \code{test}.}
}
\description{
Classify test data using output from \code{trainNB}
}
\examples{
  library(quanteda)

  ## Load data and create document-feature matrices
  train_corpus <- corpus(x=training_agendas$text)
  train_matrix <- dfm(train_corpus,
                      language="danish",
                      stem=TRUE,
                      removeNumbers=FALSE)

  test.corpus <- corpus(x=test_agendas$text)
  test_matrix <- dfm(test.corpus,
                language="danish",
                stem=TRUE,
                removeNumbers=FALSE)

  ## Convert matrix of frequencies to matrix of indicators
  train_matrix@x[train_matrix@x>1] <- 1
  test_matrix@x[test_matrix@x>1] <- 1

  ## Dropping training features not in the test set
  train_matrix <- train_matrix[,(colnames(train_matrix) \\\%in\\\% colnames(test_matrix))]


  est <- trainNB(training_agendas$coding, train_matrix)

  out <- classifyNB(est, test_matrix, test_agendas)
}
\author{
Matt W. Loftis
}

=======
\name{classifyNB}
\alias{classifyNB}
\title{Classify Naive Bayes}
\description{
Classify test data using output from \code{trainNB}
}
\usage{classifyNB(est, test_matrix, test)}

\arguments{
  \item{est}{Output object from \code{trainNB}}
  \item{test_matrix}{A \code{quanteda} document-feature matrix with the same number of rows as \code{test}. Rows must match.}
  \item{test}{The data frame containing the text data from which \code{test_matrix} was created.}
}
\details{}
\value{A data frame equal to \code{test} with four added columns:
  \item{max_posterior}{Maximum posterior probability of any class for this document. This matches the posterior probability of the classification assigned in the \code{max_match} column.}
  \item{max_ratios}{Maximum ratio of posterior to prior probability of any class for this document. This matches the ratio of the classification assigned in the \code{ratio_match} column.}
  \item{max_match}{Class associated with maximum posterior probability. Contains predicted class for each observation in \code{test}.}
  \item{ratio_match}{Class associated with maximum ratio of posterior to prior probability. Contains predicted class for each observation in \code{test}.}
}
\references{}
\author{Matt W. Loftis}
\examples{
  library(quanteda)
  
  ## Load data and create document-feature matrices
  train.corpus <- corpus(x=training_agendas$text)
  train_matrix <- dfm(train_corpus, 
                      language="danish", 
                      stem=T, 
                      removeNumbers=F)

  test.corpus <- corpus(x=test_agendas$text)
  test_matrix <- dfm(test.corpus, 
                      language="danish", 
                      stem=T, 
                      removeNumbers=F)
  
  ## Convert matrix of frequencies to matrix of indicators
  train_matrix@x[train_matrix@x>1] <- 1 
  test_matrix@x[test_matrix@x>1] <- 1
  
  ## Dropping training features not in the test set
  train_matrix <- train_matrix[,(colnames(train_matrix) \%in\% colnames(test_matrix))]

  est <- train.NB(training_agendas$coding, train_matrix)

  out <- classifyNB(est, test_matrix, test)
}
>>>>>>> 069e694d09b3ec714660b30a7155bbbe5ab1e7c4
